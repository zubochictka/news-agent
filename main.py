# main.py
import os
import asyncio
import feedparser
from datetime import datetime
from deep_translator import GoogleTranslator
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import openai

# ===== –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Replit Secrets) =====
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    print("‚ùó –ü–ï–†–ï–î –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï–ú: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_TOKEN –∏ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise SystemExit(1)

openai.api_key = OPENAI_API_KEY

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
CHECK_INTERVAL_SECONDS = 60  # –æ–ø—Ä–æ—Å RSS –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
URL = "https://www.coindesk.com/arc/outboundfeeds/rss/"
KEYWORDS = [
    "bitcoin", "crypto", "ethereum", "blockchain",
    "white house", "biden", "trump", "sec", "fed",
    "interest rates", "inflation", "regulation", "us government"
]

translator = GoogleTranslator(source='en', target='ru')
latest_title = None

def log_news(title, summary, analysis):
    with open("news_log.txt", "a", encoding="utf-8") as f:
        f.write(f"\n{'='*60}\n")
        f.write(f"{datetime.now().isoformat()}\n")
        f.write(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n")
        f.write(f"–û–ø–∏—Å–∞–Ω–∏–µ: {summary}\n")
        f.write(f"–ê–Ω–∞–ª–∏–∑:\n{analysis}\n")

def get_latest_news():
    global latest_title
    feed = feedparser.parse(URL)
    for entry in feed.entries:
        text = f"{entry.title} {getattr(entry, 'summary', '')}".lower()
        if any(k.lower() in text for k in KEYWORDS):
            if latest_title != entry.title:
                latest_title = entry.title
                return entry
    return None

def analyze_with_gpt(title_ru: str, summary_ru: str) -> str:
    prompt = f"""
–ù–æ–≤–æ—Å—Ç—å (–Ω–∞ —Ä—É—Å—Å–∫–æ–º): {title_ru}
–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {summary_ru}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –∫–∞–∫ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
1) –î–∞–π –æ–¥–Ω–æ —Å–ª–æ–≤–æ: –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ / –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ / –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ.
2) –ï—Å–ª–∏ –≤ –Ω–æ–≤–æ—Å—Ç–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∏–∑ —Ç–æ–ø-20 ‚Äî —É–∫–∞–∂–∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é: LONG –∏–ª–∏ SHORT.
3) –ö–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø–æ—è—Å–Ω–∏ –ø—Ä–∏—á–∏–Ω—É.

–û—Ç–≤–µ—Ç –¥–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–í–ª–∏—è–Ω–∏–µ: <–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ/–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ/–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ>
–ú–æ–Ω–µ—Ç–∞: <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ '–Ω–µ—Ç'>
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <LONG/SHORT/–Ω–µ—Ç>
–ü–æ—è—Å–Ω–µ–Ω–∏–µ: <—Ç–µ–∫—Å—Ç>
"""
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200,
            temperature=0.0
        )
        return resp['choices'][0]['message']['content'].strip()
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GPT: {e}"

async def check_and_send_news(app):
    print("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω.")
    while getattr(app, "auto_check", True):
        news = get_latest_news()
        if news:
            title_en = news.title
            summary_en = getattr(news, "summary", "")
            title_ru = translator.translate(title_en)
            summary_ru = translator.translate(summary_en)
            analysis = analyze_with_gpt(title_ru, summary_ru)
            log_news(title_ru, summary_ru, analysis)
            msg = (
                f"üì∞ *–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å:*\n\n"
                f"*{title_ru}*\n\n"
                f"{summary_ru}\n\n"
                f"üîó {news.link}\n\n"
                f"ü§ñ *–ê–Ω–∞–ª–∏–∑ –ò–ò:*\n{analysis}"
            )
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç—å: {title_en}")
            for chat_id in app.chat_ids:
                try:
                    await app.bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")
                except Exception as ex:
                    print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", ex)
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)
    print("–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    app = context.application
    if not hasattr(app, "chat_ids"):
        app.chat_ids = set()
    app.chat_ids.add(chat_id)
    app.auto_check = True
    # –ó–∞–ø—É—Å—Ç–∏–º –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)
    if not hasattr(app, "news_task") or app.news_task.done():
        app.news_task = asyncio.create_task(check_and_send_news(app))
    await update.message.reply_text("üöÄ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –Ø –ø—Ä–∏—à–ª—é —Å–≤–µ–∂–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º.")

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    app.auto_check = False
    await update.message.reply_text("üõë –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    news = get_latest_news()
    if not news:
        await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.")
        return
    title_ru = translator.translate(news.title)
    summary_ru = translator.translate(getattr(news, "summary", ""))
    analysis = analyze_with_gpt(title_ru, summary_ru)
    log_news(title_ru, summary_ru, analysis)
    msg = (
        f"üì∞ *–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å:*\n\n"
        f"*{title_ru}*\n\n"
        f"{summary_ru}\n\n"
        f"üîó {news.link}\n\n"
        f"ü§ñ *–ê–Ω–∞–ª–∏–∑ –ò–ò:*\n{analysis}"
    )
    await update.message.reply_text(msg, parse_mode="Markdown")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stop", stop_command))
    app.add_handler(CommandHandler("news", news_command))
    app.chat_ids = set()
    app.auto_check = True
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã –≤ Telegram...")
    app.run_polling()

if __name__ == "__main__":
    main()
