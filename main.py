import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
import aiohttp
import json

# -----------------------------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
# -----------------------------------------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN:
    print("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    exit(1)

# -----------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# -----------------------------------------------
# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
# -----------------------------------------------
async def fetch_cryptopanic_news():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å CryptoPanic - –Ω–∞—à–µ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞!
    """
    if not CRYPTOPANIC_API_KEY:
        logger.warning("‚ùå CRYPTOPANIC_API_KEY –Ω–µ –∑–∞–¥–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º CryptoPanic")
        return None
    
    # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    url = f"https://cryptopanic.com/api/v1/posts/?auth_token={CRYPTOPANIC_API_KEY}&kind=news&filter=important"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç CryptoPanic –ø–æ–ª—É—á–µ–Ω—ã!")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç–∏
                    if "results" in data and len(data["results"]) > 0:
                        latest_news = data["results"][0]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        return {
                            "title": latest_news.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
                            "url": latest_news.get("url", ""),
                            "source": "CryptoPanic",
                            "sentiment": latest_news.get("sentiment", "neutral"),  # bullish/bearish/neutral
                            "published_at": latest_news.get("published_at", "")
                        }
                    else:
                        print("‚ÑπÔ∏è –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
                        return None
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {resp.status}")
                    return None
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å CryptoPanic: {e}")
        return None
async def fetch_latest_news():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –í–°–ï–• –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    print("üîç –ò—â—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å CryptoPanic (–Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    crypto_news = await fetch_cryptopanic_news()
    if crypto_news:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç—å: {crypto_news['title'][:50]}...")
        return crypto_news
    
    # –ï—Å–ª–∏ CryptoPanic –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∑–∂–µ
    print("‚ÑπÔ∏è –ù–æ–≤–æ—Å—Ç–µ–π —Å CryptoPanic –Ω–µ—Ç")
    return None


async def check_and_send_news(app):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    bot_data = app.bot_data
    logger.info("üîÅ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞.")
    last_sent = None

    while bot_data.get("auto_check", True):
        news_title = await fetch_latest_news()
        if news_title and news_title != last_sent:
            last_sent = news_title
            for chat_id in bot_data.get("chat_ids", []):
                try:
                    await app.bot.send_message(chat_id=chat_id, text=f"üì∞ {news_title}")
                    logger.info(f"–ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

    logger.info("üõë –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


# -----------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã Telegram
# -----------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    bot_data = app.bot_data
    chat_id = update.effective_chat.id

    bot_data.setdefault("chat_ids", set()).add(chat_id)
    bot_data["auto_check"] = True

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    if not bot_data.get("news_task") or bot_data["news_task"].done():
        bot_data["news_task"] = asyncio.create_task(check_and_send_news(app))

    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ò–ò-–∞–≥–µ–Ω—Ç.\n"
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫.\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π /stop."
    )


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    bot_data = app.bot_data
    bot_data["auto_check"] = False
    await update.message.reply_text("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"""
    latest = await fetch_latest_news()
    if latest:
        await update.message.reply_text(f"üì∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å: {latest}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")


# -----------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# -----------------------------------------------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("news", news))

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    app.bot_data["chat_ids"] = set()
    app.bot_data["auto_check"] = True
    app.bot_data["news_task"] = None

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    loop = asyncio.get_event_loop()
    if not app.bot_data["news_task"]:
        app.bot_data["news_task"] = loop.create_task(check_and_send_news(app))

    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã –≤ Telegram.")
    app.run_polling(stop_signals=None)  # —á—Ç–æ–±—ã Render –Ω–µ —É–±–∏–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å


if __name__ == "__main__":
    main()



